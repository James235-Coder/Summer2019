#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 22 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 1 6 #"wxloc\0"
          0 0 53 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 446 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"./common.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 10 #"ts-tactics"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 23 #"ts-tactics/tactics/lang"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 38 #"\"../new-tactics/code-anatomy-race.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 3 #"bio"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Kartiki Gaur\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 8 #"\"kg.png\""
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 59
#"\"Hi! I just finished my first year of college at UC Berkele"
0 0 19 3 55 #"y. I started coding during my freshman year of college."
0 0 19 29 1 #"\n"
0 0 19 3 141
(
 #"I am Cognitive Science major, so I am interested in the intersection"
 #" between neuroscience and CS and, more specifically, neural computat"
 #"ion. "
) 0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 4 #"blog"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 1\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"DCog"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 19 #"I enjoyed learning "
0 0 20 3 357
(
 #"about Distributed Cognition during the first day of internship. I fe"
 #"lt the following website really helped me understand the topic. DCog"
 #" is the idea that outside environments and rescources reinforce one'"
 #"s learning. An example of this would be flow states, in which a quie"
 #"t, outdoor environment is more conducive to the formation of a flow "
 #"of concentration."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 3 #"url"
0 0 24 3 1 #"{"
0 0 20 3 75
(
 #"https://www.sciencedirect.com/topics/computer-science/distributed-co"
 #"gnition"
) 0 0 24 3 1 #"}"
0 0 20 3 1 #")"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 2\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"Recognition vs. Recall vs. Fluency"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 367
(
 #"Today, we learned about recall vs. recognition. We applied our knowl"
 #"edge of this by playing an ASL memory game. We learned that we were "
 #"able to recall symbols that were either the most unique or relevant "
 #"to use. Eventually, by playing the game for a few rounds, we were ab"
 #"le to recognize more symbols. We also learned about how fluency is t"
 #"he highest level of recall."
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 3\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 39 #"Refactoring, Broca's Area, fMRI Studies"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 236
(
 #"Refactoring is the process of changing code without changing the ext"
 #"ernal structure. Broca's Region is where speech is produced. fMRI St"
 #"udies show that coding languages are processed in the same part of t"
 #"he brain as \"natural languages.\""
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 4\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 30 #"New Tactic: Code Anatomy Race "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"@("
0 0 14 3 16 #"tactic->scribble"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"code-anatomy-race"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"Coach"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Team"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 14 #"Team-Computers"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 20 #"both-challenge-cards"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 16 #"both-whiteboards"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 11 #"the-markers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 5\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 20 #"Ask Me Anything Day:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 340
(
 #"Today, we learned more about the difference between working at big c"
 #"ompanies vs. working at startups. I found it interesting to learn mo"
 #"re about the fast-paced environments that startups have. I also got "
 #"to learn more about different coding languages paradigms and, more s"
 #"pecifically, functional programming vs. object-oriented programming."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 6\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 86
(
 #"Today, we came up with 3 examples for map/apply that may be translat"
 #"ed into new katas."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 21 #"(map sub1 (range 10))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 23 #"=(-1 0 1 2 3 4 5 6 7 8)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 22 #"(map max (range -5 5))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 27 #"=(-5 -4 -3 -2 -1 0 1 2 3 4)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 39 #"(apply gcd (map sub1 (range -10 11 2)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 3 #"= 1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 7\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 37 #"Today, we learned about git branches."
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 26 #"Another apply/map example:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 22 #"(define (f x) (+ x 4))"
0 0 24 29 1 #"\n"
0 0 20 3 30 #"(apply * (map f (list 1 2 3)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 4 #"=210"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 65
#"(apply cc-superimpose(list (cloud 175 175 \"orange\")(circle 100)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 47 #"(define (g x) (append (list x) (list \"c\" \"d\")))"
0 0 24 29 1 #"\n"
0 0 20 3 22 #"(map g (list \"a\" \"b\"))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 43 #"(map shuffle (list (list \"c\" \"o\" \"d\" \"e\")))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 41 #"(map (curry angel-wing 100 100) (list #t "
0 0 20 3 1 #"#"
0 0 20 3 3 #"f))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 77
(
 #"(group-by (lambda (x) (modulo x 2)) (list (apply + (map add1 (list 1"
 #" 2 3)))))"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 48 #"(map sub1 (list (count even? (list 1 2 3 4 5))))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 40 #"(map circle (shuffle (range 10 100 10)))"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 41 #"(define nice-fish (standard-fish 100 50))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 16 #"(define (func x)"
0 0 24 29 1 #"\n"
0 0 20 3 24 #"(if (equal? x nice-fish)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 20 #"(jack-o-lantern 100)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 20 3 25 #"(map add1 (list 1 2 3))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 16 #"(func nice-fish)"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 96
(
 #"(apply cc-superimpose(list (face* 'worried 'large #f default-face-co"
 #"lor 6)(cloud 125 25 \"red\")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 7 #"\"Day 9\""
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 20 3 124
(
 #"Today, we added a \"How To Add Your Blog\" section to Tips&Tactics. "
 #"We also added 3 tactics to the tactics-variances \"a\" page."
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"blog-post"
0 0 24 3 1 #"["
0 0 19 3 8 #"\"Day 10\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"{"
0 0 20 3 4 #"Code"
0 0 20 3 4 #" the"
0 0 20 3 1 #" "
0 0 20 3 6 #"letter"
0 0 20 3 3 #" T."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 20 3 9 #"(add-line"
0 0 20 3 2 #" ("
0 0 20 3 4 #"line"
0 0 20 3 1 #" "
0 0 20 3 3 #"100"
0 0 20 3 1 #" "
0 0 20 3 1 #"0"
0 0 20 3 1 #" "
0 0 20 3 6 #"\"black"
0 0 20 3 1 #"\""
0 0 20 3 2 #") "
0 0 20 3 2 #"50"
0 0 20 3 1 #" "
0 0 20 3 1 #"0"
0 0 20 3 1 #" "
0 0 20 3 2 #"50"
0 0 20 3 1 #" "
0 0 20 3 2 #"50"
0 0 20 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 9 #"outline\")"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"{"
0 0 20 3 19 #"Code a stick figure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 9 #"codeblock"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 6 #"define"
0 0 20 3 2 #" ("
0 0 20 3 5 #"head)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 6 #"circle"
0 0 20 3 1 #" "
0 0 20 3 2 #"30"
0 0 20 3 1 #" "
0 0 20 3 9 #"\"outline\""
0 0 20 3 1 #" "
0 0 20 3 9 #"\"black\"))"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 6 #"define"
0 0 20 3 2 #" ("
0 0 20 3 5 #"body)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 8 #"add-line"
0 0 20 3 1 #"("
0 0 20 3 4 #"head"
0 0 20 3 2 #") "
0 0 20 3 2 #"30"
0 0 20 3 1 #" "
0 0 20 3 2 #"60"
0 0 20 3 1 #" "
0 0 20 3 2 #"30"
0 0 20 3 1 #" "
0 0 20 3 3 #"200"
0 0 20 3 1 #" "
0 0 20 3 9 #"\"black\"))"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 6 #"define"
0 0 20 3 2 #" ("
0 0 20 3 5 #"arms)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 8 #"add-line"
0 0 20 3 2 #" ("
0 0 20 3 4 #"body"
0 0 20 3 2 #") "
0 0 20 3 1 #"0"
0 0 20 3 1 #" "
0 0 20 3 3 #"100"
0 0 20 3 1 #" "
0 0 20 3 2 #"70"
0 0 20 3 1 #" "
0 0 20 3 3 #"100"
0 0 20 3 1 #" "
0 0 20 3 9 #"\"black\"))"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 6 #"define"
0 0 20 3 2 #" ("
0 0 20 3 5 #"legs)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 8 #"add-line"
0 0 20 3 1 #"("
0 0 20 3 8 #"add-line"
0 0 20 3 1 #"("
0 0 20 3 5 #"arms)"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 20 3 2 #"30"
0 0 20 3 1 #" "
0 0 20 3 3 #"200"
0 0 20 3 1 #" "
0 0 20 3 2 #"10"
0 0 20 3 1 #" "
0 0 20 3 3 #"240"
0 0 20 3 1 #" "
0 0 20 3 8 #"\"black\")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 20 3 2 #"30"
0 0 20 3 1 #" "
0 0 20 3 3 #"200"
0 0 20 3 1 #" "
0 0 20 3 2 #"50"
0 0 20 3 1 #" "
0 0 20 3 3 #"240"
0 0 20 3 1 #" "
0 0 20 3 9 #"\"black\"))"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 6 #"define"
0 0 20 3 2 #" ("
0 0 20 3 13 #"stick-person)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 20 3 1 #"("
0 0 20 3 8 #"legs))  "
0 0 24 29 1 #"\n"
0 0 20 3 1 #"("
0 0 20 3 13 #"stick-person)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
